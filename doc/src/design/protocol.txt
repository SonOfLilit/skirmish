Client-Server Network Protocol Specification
============================================

Design Considerations
---------------------

- Simplicity
- Readability by human beings where speed doesn't matter
- Speed where it matters
- No consideration given to security

Therefore, the protocol between games will be plaintext and the
protocol within games will be binary.

Responses
---------

In general:

* "ok\n\n" is an ACK - it is sent to signify that a message was received
  and everything is OK
* "fatal <string>" reports an error that requires the server to
  disconnect the client, and is followed by disconnecting. The string
  may be up to 1KiB long and may contain any character.
* Every message is contained in one UDP packet with a body of no more
  than 8192 bytes

Handshake
---------

Client sends

----------------------------------------------------------------------
version <int>\n
id <id_string>\n
secret <secret_string>\n
\n
----------------------------------------------------------------------

// {num} has special meaning to AsciiDoc (so instead we write \{n})

where <id_string> matches /[0-9a-zA-Z.]\{3-16}/ and <secret string>
matches /.\{0-255}/ (with '.' not matching newline).

Server responds

----------------------------------------------------------------------
fatal <message>
<disconnects>
----------------------------------------------------------------------

or

----------------------------------------------------------------------
ok\n
\n
----------------------------------------------------------------------

from *different address/port*. Client must subsequently communicate
with that address/port combination.

WARNING: This is a security vulnerability, as an attacker might
bombard known players with "ok\n\n" messages and hijack
sessions. However, any UDP protocol not preceded by establishment of a
shared secret by encrypted TCP that is later used to generate a
sequence of packet IDs is totally insecure. Eventually such a protocol
will be implemented. In the meantime, we live with insecurity.

Client sends

----------------------------------------------------------------------
game\n
\n
----------------------------------------------------------------------

Server responds

----------------------------------------------------------------------
world-corner <long>,<long>\n
world-size <long>,<long>\n
\n
----------------------------------------------------------------------
