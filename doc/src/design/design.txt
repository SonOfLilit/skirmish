Skirmish
========
Aur Saraf <sonoflilit@gmail.com>

A real-time tactical and programming game of medieval war by Aur Saraf.


Development Process
-------------------

The process for developing a feature is:

. design.txt is updated to include feature
. stories.txt is updated with feature description, estimation,
  assignment
. Acceptance Tests are written for feature
. Loop until acceptance tests pass:
 .. Unit test is written and seen to fail
 .. Code is written until unit test passes
. All code related to feature is reviewed, refactored as needed,
  documentation is ensured to be complete
. stories.txt is updated with real time taken

Acceptance tests are system-level tests (i.e. they never use
unofficial ways to interact with the System Under Test and they never
fake parts of the system) that define what the feature being "done"
means. Acceptance tests should cover at least

* *All* the different acceptable use cases of the feature
* *All* the boundary conditions of the feature definition from within
  (i.e. if the maximum allowed id is 16 characters, try using a 16
  character id)
* Some failure cases (i.e. test that the system gives an error message
  for a 17 character id) - although these are in general trusted to
  the unit tests, this is to catch insufficient unit testing of a
  feature, so e.g. if the first time all acceptable-use and
  boundary-case acceptance tests of a feature pass, a failure-case
  fails - this indicates code-smell and you should review the
  feature's unit tests and probably add many (but always at least one
  for the unhandled failure-case that the acceptance tests caught)

Unit tests run a unit of code (e.g. class) in isolation, faking
aspects of the external environment the code expects with mocks. They
should completely specify the behaviour of a unit of code. That means:

* *All* acceptable use cases
* *All* boundary conditions, from within and from without
* *All* illegal inputs, states, etc' that the code is expected to handle

A feature is 'not' complete before the code is readable and
well-documented.

.Rationale
**********************************************************************
Two years from now, I will read this code and want to add a
feature. When that happens, I do not want to suffer a wave of
self-hate.

It is worth the effort, as that situation will certainly happen over
and over again - not to mention new developers tackling the project.

Five years from now, I might decide to add multiplayer support. Much
of the code will need to change in subtle ways. Nothing is more prone
to introduce bugs than subtle changes in the code. Unless a full test
suite can guarantee to catch virtually all of them, there will be no
choice but a complete rewrite - and that could 'not' be
afforded. Better pay the price in development efficiency now than
throw everything out the window the moment a feature that changes the
design is needed.
**********************************************************************


High Level Design
-----------------

Control Flow
~~~~~~~~~~~~

- A skirmish server is set up to listen for connections
- A skirmish client connects to the server
- A game-selection protocol is played out (at this stage, it is a
  one-step protocol consisting of the client requesting a new game)
- A game is played:
 * The server informs the client of the game map
 * The client informs the server of initial game configuration,
   consisting of source code for unit AI procedures (with parameters)
   that the client wishes to be assignable to units during the game,
   initial unit placement on the map and initial AI configuration
 * The server informs the client that the game has started
 * Periodically, the server sends the client a status report including
   unit location and direction
 * The client may send the server method calls on unit AI modules and
   new AI assignments for units

Game World
~~~~~~~~~~

The game world is a rectangle in the (unsigned long integer)^2 space,
i.e. within the square (0, 0, 4294967296, 4294967296).

.Rationale
**********************************************************************
Considering the alternatives:

Float coordinates::

  Hundreds of percents of CPU and network bandwidth increase in
  exchange for totally unneeded flexibility - and imprecision, too.

Short int coordinates::

  Assuming most player armies will occupy
  approximately a screenful, and assuming a screenful is around
  1024x1024, 65536/1024 = 64, this means the largest possible world
  can accomodate up to 64x64 = 4096 players. That is definitely not
  enough.

Long int coordinates in the server and Short int in the client::

  Nobody cares about the client performance gain, and the same - or
  more - network traffic volume saving can be gained 'later', 'if
  needed', by introducing a protocol compressor - without changing any
  other part of the system, and without all the bugs and testing
  headaches of different coordinate systems on the client and server,
  'now'.
**********************************************************************

By default, game worlds span from (0,0) to (2999, 2999).

Terrain will be dealt with later, some way or another. Currently there
is only one type of terrain - "ground" - and no need to communicate
it.


Client-Server Protocol
----------------------

Communication is based on UDP.

Client always initiates communication. Default port is 1657.

'[...]' means that a lot of time may pass between the former and
current stages.

Lines starting with '#' are followed by an ACK from the other party.

At all times, the client must send a message at least once every
PING_PERIOD. A ping message exists that the server immediately answers
with a pong message for times of low communication volumes.

- A client connects to the server via UDP
- Initial handshake (client sends protocol version, identifier; server
  disconnects with message or accepts from a different port, which
  client should communicate with from now on)
- Client may do one of:
 * [...] Request new game (no parameters; server refuses with message or
   accepts)
 * If accepted:
  - # Server sends game map and a list of player identifiers, how many
    units they have and the area where they may place them
  - [...] # Client sends unit placement, source code for unit AI that it
    may wish to assign during the game and initial assignment of AI
    module and parameters to each unit
  - [...] # Server sends "game started" message
   * Once every UPDATE_PERIOD, server sends list of units seen and
     their velocity vectors and list of special events seen:
    . Hits
    . Misses
    . Units dying
   * Client may send lists of method calls on unit AI modules and new
     assignments of AI module and parameters to units


Server
------

Written in Erlang, supports one game for one player but built with
extensibility in mind.

A `listener` 'gen_server' listens for UDP communication on port
1657. When a connection happens, a `client_handler` 'gen_fsm' instance
is created to handle communication on that connection.


Client
------

Written in Ruby with Cairo graphics and matrix.rb math.

At the moment, everything before the game starts is handled by a Text
User Interface consisting of a Ruby REPL. This TUI will remain into
release (it is essential to system-level testability) but will become
optional, with a GUI as the default.

From the moment the game starts, the main interface will be graphical
(Cairo-based), with the console remaining in another window only if it
was requested (a `--console` command line option will handle that).


Future
------

- Types of unit: Short-sworders, Pikemen, Cavalry, Archery, Commander
- Fog of war (initially tactical - circle from commander, eventually
  strategic - units tell their tales of faraway events upon seeing commander)
- Messenger units that distribute new AI assignments
- Multiplayer games
- Custom HUD: AI code may send messages to message processing code on
  the server (default implementation passes everything through) that
  can send a blob of up to a certain size to the client with every
  update, used by the client to generate custom HUD info


License
-------

Copyright (c) 2009, Aur Saraf

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

- Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
- Neither the name of the Skirmish project nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
login or register to post comments
